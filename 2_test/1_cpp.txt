#define A(X) X X X X X X X X X X X X X
#define B(X) A(x) A(X) A(X)  A(x) A(X) A(X) A(x) A(X) A(X) A(x) A(X) A(X) A(x) A(X) A(X)
#define c(x) B(x) B(x) B(x) B(x) B(x) B(x) B(x) B(x) B(x) B(x) B(x) B(x) B(x) B(x) B(x) B(x) B(x) B(x) 
#define d(x)  c(x) c(x) c(x) c(x) c(x) c(x) c(x) c(x) c(x) c(x) c(x) c(x) c(x) c(x) c(x) c(x) c(x) c(x) c(x) c(x) c(x) c(x)
#define e(x) d(x) d(x) d(x) d(x) d(x) d(x) d(x) d(x) d(x) d(x) d(x) d(x) d(x) d(x) d(x) d(x) d(x) d(x) 
#define f(x) e(x) e(x) e(x) e(x) e(x) e(x) e(x) e(x) e(x) e(x) e(x) e(x) e(x) e(x) e(x) e(x) e(x) e(x) e(x) e(x) e(x) 
f(f(f(f(f(f(f(f(f(;)))))))))

#include <bits/stdc++.h>

using namespace std;
constexpr int k(int n){
    for (int i = n - 1; i >= 2; i--) if (n % i == 0) { 
        return i;
    }
    return 0;
}
template <int n>
struct zys_t
{
    static const unsigned long long val = k(n);// zys_t<n-1>::val + zys_t<n-2>::val;
};
template <size_t... i>
unsigned long long zys_impl(index_sequence<i...>, int n)
{
    constexpr array<unsigned long long, sizeof...(i)> ret = {zys_t<i>::val...};
    return ret[n];
};
unsigned long long zys(int n)
{
    return zys_impl(make_index_sequence<2000000000>(), n);
}
#define TIME_START              \
    clock_t ____start, ____end; \
    ____start = clock()
#define TIME_OUT       \
    ____end = clock(); \
    printf("\n\ntotile time=%.0fms\n", (float)(____end - ____start) * 1000 / CLOCKS_PER_SEC)

int main()
{
    int i;
    cin >> i;
    //TIME_START;
   // for (int i = 0; i < 1000; i++)
        cout << zys(i) << endl;
   // TIME_OUT;
}